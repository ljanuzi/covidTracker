{"version":3,"sources":["components/dataForm.jsx","components/landing.jsx","App.js","reportWebVitals.js","index.js"],"names":["DataForm","useState","start_date","setStartDate","end_date","setEndDate","covidCases","setCovidCases","covidAdmissions","setCovidAdmissions","covidDeaths","setCovidDeaths","dates","setDates","casesMedian","setCasesMedian","admissionsMedian","setAdmissionsMedian","deathsMedian","setDeathsMedian","casesMean","setCasesMean","admissionsMean","setAdmissionsMean","deathsMean","setDeathsMean","url","values","year","month","day","className","Grid","columns","divided","Row","stretched","Column","style","width","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","Form","Group","widths","selected","onChange","date","Checkbox","id","Field","Button","onClick","event","preventDefault","document","getElementById","checked","axios","get","params","startDate","toLocaleDateString","endDate","headers","then","response","casesArray","map","item","cases","admissionsArray","admissions","deathsArray","deaths","datesArray","console","log","Landing","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a2811be7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from 'axios';\r\nimport { Form, Button, Checkbox } from \"semantic-ui-react\";\r\nimport DatePicker from 'react-datepicker'\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { Line } from 'react-chartjs-2';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Grid, Segment } from 'semantic-ui-react'\r\n\r\n\r\nexport default function DataForm() {\r\n\r\n    const [start_date, setStartDate] = useState();\r\n    const [end_date, setEndDate] = useState();\r\n    const [covidCases, setCovidCases] = useState([]);\r\n    const [covidAdmissions, setCovidAdmissions] = useState([]);\r\n    const [covidDeaths, setCovidDeaths] = useState([]);\r\n    const [dates, setDates] = useState([]);\r\n    const [casesMedian, setCasesMedian] = useState();\r\n    const [admissionsMedian, setAdmissionsMedian] = useState();\r\n    const [deathsMedian, setDeathsMedian] = useState();\r\n    const [casesMean, setCasesMean] = useState();\r\n    const [admissionsMean, setAdmissionsMean] = useState();\r\n    const [deathsMean, setDeathsMean] = useState();\r\n    \r\n    var url = \"http://localhost:8080\"\r\n    // var url = \"\"\r\n    function getAllData() {\r\n        if (start_date && end_date) {\r\n            axios.get(url+'/api/getData', {\r\n                params: {\r\n                    startDate: start_date.toLocaleDateString(\"en\", values),\r\n                    endDate: end_date.toLocaleDateString(\"en\", values)\r\n                },\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n            }).then((response) => {\r\n                let casesArray = response.data.map((item) => {\r\n                    return item.cases;\r\n                })\r\n                setCovidCases(casesArray)\r\n                let admissionsArray = response.data.map((item) => {\r\n                    return item.admissions;\r\n                })\r\n                setCovidAdmissions(admissionsArray)\r\n\r\n                let deathsArray = response.data.map((item) => {\r\n                    return item.deaths;\r\n                })\r\n                setCovidDeaths(deathsArray)\r\n\r\n                let datesArray = response.data.map((item) => {\r\n                    return item.date;\r\n                })\r\n                setDates(datesArray)\r\n\r\n            });\r\n        } else {\r\n            axios.get(url+'/api/getAllData', {\r\n                headers: { \"Content-Type\": \"application/json\" }\r\n            }).then((response) => {\r\n                let casesArray = response.data.map((item) => {\r\n                    return item.cases;\r\n                })\r\n                setCovidCases(casesArray)\r\n                let admissionsArray = response.data.map((item) => {\r\n                    return item.admissions;\r\n                })\r\n                setCovidAdmissions(admissionsArray)\r\n\r\n                let deathsArray = response.data.map((item) => {\r\n                    return item.deaths;\r\n                })\r\n                setCovidDeaths(deathsArray)\r\n\r\n                let datesArray = response.data.map((item) => {\r\n                    return item.date;\r\n                })\r\n                setDates(datesArray)\r\n\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    function getMean() {\r\n        if (start_date && end_date) {\r\n            axios.get(url+'/api/getMean', {\r\n                params: {\r\n                    startDate: start_date.toLocaleDateString(\"en\", values),\r\n                    endDate: end_date.toLocaleDateString(\"en\", values)\r\n                },\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n            }).then((response) => {\r\n                console.log(response)\r\n                setCasesMean(response.data.cases)\r\n                setAdmissionsMean(response.data.admissions)\r\n                setDeathsMean(response.data.deaths)\r\n            });\r\n        } else {\r\n            axios.get(url+'/api/getAllMeans', {\r\n                headers: { \"Content-Type\": \"application/json\" }\r\n            }).then((response) => {\r\n                console.log(response)\r\n                setCasesMean(response.data.cases)\r\n                setAdmissionsMean(response.data.admissions)\r\n                setDeathsMean(response.data.deaths)\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    function getMedian() {\r\n        if (start_date && end_date) {\r\n            axios.get(url+'/api/getMedian', {\r\n                params: {\r\n                    startDate: start_date.toLocaleDateString(\"en\", values),\r\n                    endDate: end_date.toLocaleDateString(\"en\", values)\r\n                },\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n            }).then((response) => {\r\n                console.log(response)\r\n                setCasesMedian(response.data.cases)\r\n                setAdmissionsMedian(response.data.admissions)\r\n                setDeathsMedian(response.data.deaths)\r\n            });\r\n        } else {\r\n            axios.get(url+'/api/getAllMedian', {\r\n                headers: { \"Content-Type\": \"application/json\" }\r\n            }).then((response) => {\r\n                console.log(response)\r\n                setCasesMedian(response.data.cases)\r\n                setAdmissionsMedian(response.data.admissions)\r\n                setDeathsMedian(response.data.deaths)\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    var values = {\r\n        year: \"numeric\",\r\n        month: \"2-digit\",\r\n        day: \"2-digit\"\r\n    };\r\n    return (\r\n        <div className=\"row\" >\r\n            <Grid columns={3} divided>\r\n                <Grid.Row stretched>\r\n                   \r\n\r\n                    <Grid.Column>\r\n                        <Grid.Row>\r\n                        <p>Mean</p>\r\n                        <p>Cases:{casesMean}</p>\r\n                        <p>Admissions:{admissionsMean}</p>\r\n                        <p>Deaths:{deathsMean}</p>\r\n                        </Grid.Row>\r\n\r\n                        <Grid.Row >\r\n                        <p>Median</p>\r\n                        <p>Cases:{casesMedian}</p>\r\n                        <p>Admissions:{admissionsMedian}</p>\r\n                        <p>Deaths:{deathsMedian}</p>\r\n                        </Grid.Row>\r\n                    </Grid.Column>\r\n\r\n                    <div style={{ width: \"50%\" }}>\r\n                        <Grid.Column >\r\n                            <Line\r\n                                data={{\r\n                                    labels: dates,\r\n                                    datasets: [\r\n                                        {\r\n                                            label: 'Active Cases',\r\n                                            // fill: false,\r\n                                            // lineTension: 0.5,\r\n                                            backgroundColor: 'rgba(75,192,192,1)',\r\n                                            borderColor: 'rgba(75,192,192,1)',\r\n                                            borderWidth: 2,\r\n                                            data: covidCases\r\n                                        },\r\n                                        {\r\n                                            label: 'Admissions',\r\n                                            // fill: false,\r\n                                            // lineTension: 0.5,\r\n                                            backgroundColor: 'rgba(255, 255, 88, 1)',\r\n                                            borderColor: 'rgba(255, 255, 88, 1)',\r\n                                            borderWidth: 2,\r\n                                            data: covidAdmissions\r\n                                        },\r\n                                        {\r\n                                            label: 'Deaths',\r\n                                            // fill: false,\r\n                                            // lineTension: 0.5,\r\n                                            backgroundColor: 'rgba(255, 0, 0, 1)',\r\n                                            borderColor: 'rgba(255, 0, 0, 1)',\r\n                                            borderWidth: 2,\r\n                                            data: covidDeaths\r\n                                        }\r\n                                    ]\r\n                                }}\r\n                            />\r\n                        </Grid.Column>\r\n\r\n                        <Grid.Row>\r\n                        <Form>\r\n\r\n                                <Form.Group widths='equal'>\r\n                                    <DatePicker\r\n                                        selected={start_date}\r\n                                        onChange={date => setStartDate(date)}\r\n                                    /><DatePicker\r\n                                        selected={end_date}\r\n                                        onChange={date => setEndDate(date)}\r\n                                    />\r\n                                </Form.Group>\r\n\r\n                            <Form.Group widths='equal'>\r\n                                <Checkbox id=\"allData\" label='All Data' />\r\n                                <Checkbox id=\"mean\" label='Mean' />\r\n                                <Checkbox id=\"median\" label='Median' />\r\n                            </Form.Group>\r\n                            <Form.Field>\r\n                                <Button\r\n\r\n                                    onClick={(event) => {\r\n                                        event.preventDefault();\r\n                                        if (document.getElementById(\"allData\").checked) {\r\n                                            getAllData();\r\n                                        }\r\n                                        if (document.getElementById(\"mean\").checked) {\r\n                                            getMean();\r\n                                        }\r\n                                        if (document.getElementById(\"median\").checked) {\r\n                                            getMedian();\r\n                                        }\r\n                                    }\r\n                                    }\r\n                                >\r\n                                    Submit\r\n                                </Button>\r\n\r\n                            </Form.Field>\r\n                        </Form>\r\n                    </Grid.Row>\r\n                    </div>\r\n\r\n                    \r\n                </ Grid.Row>\r\n                {/* <Grid.Row columns={2}>\r\n\r\n                </Grid.Row>\r\n\r\n                <Grid.Row columns={3} style={{ width: \"50%\" }}>\r\n                    \r\n\r\n                </Grid.Row> */}\r\n\r\n            </Grid>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport DataForm from \"./dataForm\";\r\n\r\n\r\nexport default function Landing() {\r\n\r\n    const [data, setData] = useState([]);\r\n\r\n    return (\r\n\r\n        <div className=\"container\">\r\n\r\n            <DataForm/>\r\n\r\n\r\n        </div>\r\n    );\r\n\r\n\r\n}","import React from 'react';\nimport {\n  Switch,\n  Route,\n  BrowserRouter,\n} from \"react-router-dom\";\nimport './App.css';\n\nimport Landing from '../src/components/landing';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <div>\n          <Switch>\n            <Route exact={true} path=\"/\" component={Landing}></Route>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}